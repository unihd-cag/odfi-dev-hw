#!/usr/bin/env tclsh8.5


package require odfi::tool
package require odfi::dev::hw::package

odfi::tool::describe {


    description "

This Tools takes an input file with a list of PIN names and Package Position, and can produce SVG picture, along with an HTML viewer.
An embedded web viewer can be started to view in a browser easily

- Input File FORMAT:
    
    - Pins List Format (files without extension, *.txt and standard input):

        Each Line of the input file defines one PIN POSITION pair, like this:

        ...
        CLK A1
        GPIO0 B2
        ...

        The Order of the definitions is irrelevant, the tool sorts everything correctly

    - CSV file Format (files with *.csv extension):

        First Line: Columns separated by ',' , ex: ,1,2,3,4
        Next Lines: Line name , values of pins ... , ex: A , VDD, VSS, ...   

    - Tcl Script Format (files with *.part or *part.tcl extension):

        odfi::dev::hw::package::part partname {
            pin {PINNAME @POSITION} {
                attributefunction
            }
        }

        to add an attribute with an attributefunction use either addAttribute NAME VALUE
        or define your own attributefunction with odfi::dev::hw::package::attributeFunction ::NAME
        Regular Tcl code is allowed.

- Input definition source

    The tool reads the standard input for the input file until EOF is found
    The input is then parsed using ODFI embedded TCL parser, so the input can contain some TCL code

- Usage example:

    - Using an input file:

        odfi_package_footprint < /path/to/input_definition/file

    - By Piping

        wonderful_pin_list_output_tool | odfi_package_footprint

    - By Hand typing

        odfi_package_footprint

        Then enter the input (copy paste will work)
        Press CTRL + D to produce the End of File character


    "
    argument producer optional type producer description "If defined, specify which producer will be used"

    argument file optional type file description "If defined, the source file to read pins definitions"

    argument web  optional description "

        If defined, starts an embedded web server and tries to open browser

    "

    argument producers optional description "Shows available Producers"

    argument rules optional description "Show rules to selected footprint if available"


}
tool parseArguments

#########################################
## Create Objects to allow them to be detected as availableProducers (must inherit from ::odfi::dev::hw::package::BaseOutputGenerator)
#########################################

set part [::new odfi::dev::hw::package::Part #auto]

##Create svg to be an availableProducer
set svg [::new odfi::dev::hw::package::SVGOutput #auto ::part]

##Create testoutput to be an availableProducer
set test [::new odfi::dev::hw::package::TestOutput #auto ::part]

set testOut [::new odfi::dev::hw::package::DMLOutput #auto ::part]

#Get available Producers
set objects [itcl::find objects]
set aProducers ""
set prod ""
foreach obj $objects {
    if {[$obj info inherit] == "::odfi::dev::hw::package::BaseOutputGenerator"} {
        set prod $obj
        lappend aProducers [$obj info class]
    }
}


###########################################
## Try to Read Foot Print Definition File Provided
##########################################
if {$file!=false} {

    ## Read File Through embedded TCL
    ##########set fileContent [odif::closures::embeddedTclFromFileToString $file]
    ##
    set f [open $file]
    set fileContent [read $f]
    close $f
    switch -glob -- [file extension $file] {

        *.csv {
        ## CSV File
        ##################
            $part readCSV $fileContent
            #footprint packageInfo

        }

        *.tcl -
        *.part {
        ##Tcl Script
        ############
            namespace inscope odfi::dev::hw::package {
                    set part [odfi::closures::doClosure $fileContent]
            }
            
            #Look for correct cript format:
            if {$part == ""} {
                set inf 1
            } else {
                set inf [expr {[$part info class] != "::odfi::dev::hw::package::Part"}]
            }
            if {$inf} {
                    puts "Incorrect tcl script format: Must return a part object (maybe the last command is not creating the part object?) -> Exiting"
                    exit 1
            }
        }

        default {
            ## Simple List file
            #######################   
                #odfi::dev::hw::package::FootPrint footprint
            set pnpairs ""
            foreach {name pos} $fileContent {
                #swap name and pos to match readInputList parameters:
                set nname $pos
                set pos $name
                set name $nname
                lappend pnpairs "$name $pos"
            }
            $part readInputList $pnpairs
            #footprint packageInfo
        }

    }

    #if the user wants to see the rules:
    if {$rules!=false} {
        
        set p $file

        set f [file tail $p]
        set lenF [string length $f]
        set lenD [string length $p]
        set end [expr $lenD - $lenF]
        set dir [string range $p 0 [expr $end - 1]]
      
        set filename $dir
        set filename [split $filename "~"]
        set filename [lindex $filename end]
        set filename "$filename"
        set pName $f

        set pName [split $pName "."]

        set pName [lindex $pName 0]
        
        append filename $pName
        append filename ".package.rules"

        if {[file exists $filename]} {
            set fp [open $filename r]
            set file_data [read $fp]
            close $fp
        } else {
            set file_data "No Rules saved for this package"
        }
        puts "Rules: "
        puts "$file_data"
        set rules $file_data
    }


} elseif {$producers!=false} {
    #Show available producers: List all Classes that inherit from odfi::dev::hw::package::BaseOutputGenerator
   
    puts "available Producers: $aProducers"
} elseif {$web!=false} {
    #open webapp
    set file "~/modules-manager/install/dev-hw/tests/package/test_package_viewer_web.tcl"
    set f [open $file]
    set fileContent [read $f]
    close $f
    odfi::closures::doClosure $fileContent

} else {

    ## No File Provided Read Standard Input
    ################################
    odfi::common::logInfo "Reading Standard Input for definition"
    #puts "prod: $producer"
    if {$producer==false} {
        error "must specify a producer to use Standard Input as input (use --producer PRODUCER). To Get available Producers use --producers)"
    }
    odfi::common::logInfo "If typing in the input yourself, don't forget to press CTRL+D to send the end of file character when you're done"

    ## Forward user input to an internal stream for flexibility
    set inputStream [odfi::common::newStringChannel]
    while {[gets stdin line]>= 0} {

        puts $inputStream $line

    }
    
    ## Exit if empty
    if {[tell $inputStream]==0} {
        odfi::common::logInfo "Empty Input -> Exiting"
        exit 1
    }
    
    ## Parse result using TCL parser
    ##################
    #set inputStream [odfi::closures::embeddedTclStream $inputStream]
    #puts "bla: $inputStream"
    #set input $inputStream
    flush $inputStream
    set input [read $inputStream]
    #all 3:
    set isCsv [regexp {,?[0-9A-Za-z[\]_^\"]+,.*} $input res]
    #only script:
    set isScript [regexp -all {(odfi::dev::hw::package::)?part\s+[^ ]+\s+\{} $input res]
    #script and list:
    set isList [regexp {[^ ]+ [^ ]+\n} $input res]

    #puts "isCsv: $isCsv  is Script: $isScript isList: $isList"

    ## Create FootPrint Object and fill it with input datas
    ####################
    #edid::package::FootPrint footprint
    #footprint readInputList [read $inputStream]
    
    if {$isScript} {
        odfi::common::logInfo "Assuming Standard Input is a tcl script"
        namespace inscope odfi::dev::hw::package {
                set part [odfi::closures::doClosure $input]
        }
        
        #Look for correct cript format:
        if {$part == ""} {
            set inf 1
        } else {
            set inf [expr {[$part info class] != "::odfi::dev::hw::package::Part"}]
        }
        if {$inf} {
                puts "Incorrect tcl script format: Must return a part object (maybe the last command is not creating the part object?) -> Exiting"
                exit 1
        }
    }  elseif {$isList} {
        odfi::common::logInfo "Assuming Standard Input is a List"
        set pnpairs ""
        foreach {name pos} $input {
            #swap name and pos to match readInputList parameters:
            set nname $pos
            set pos $name
            set name $nname
            lappend pnpairs "$name $pos"
        }
        $part readInputList $pnpairs
    }  elseif { $isCsv } {
        odfi::common::logInfo "Assuming Standard Input is a CSV"
        $part readCSV $input
    } else {
        odfi::common::logInfo "No matching pattern found -> exiting"
        exit 1
    }
}

## Exit if no Footprint definition was found

###########################
## Try to produce output 
###########################

#Is an output expected?
if {$producers!=true} {
    #check for producer
    if {$producer!=false} {
        set prod $producer
        
    } else {
        set i 0

        foreach prod $aProducers {
            puts "$prod: $i, "
            incr i
        }
        puts -nonewline "Which Producer do you want to use: "
        flush stdout
        set in [gets stdin]
        #puts "in: $in"
        set prod [lindex $aProducers $in]
    }
    set obj [::new $prod #auto $part]
    #Do we have rules?
    if {$rules!=false} {
        $obj defineParameters $rules
    }
    puts "[$obj produceToString]"
    
}

